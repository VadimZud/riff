/*Объект для работы с файлами на базе FILE из stdio.*/

#ifndef FEXT_H
#define FEXT_H 1

#include <stdio.h>

/*Описатель файла*/
struct fext;

/*Открывает файл с имененем path в режиме mode. Аргументы эквивалентны функции fopen() из stdio.h.
В случае успеха возвращает указатель на описатель открытого файла.
В случае неудачи, возвращает NULL.
Может устанавливать в errno значения, устанавливаемые функциями fopen() и malloc().*/
struct fext *fext_open(const char *path, const char *mode);

/*Уничтожает описатель fext и закрывает связанный с ним файл
В случае успеха возвращает 0.
В случае ошибки возвращает 1.
Может устанавливать в errno значения, устанавливаемые функцией fclose().*/
int fext_close(struct fext *fext);

/*Читает не более *size байт из файла fext в буфер *buf.
Число прочитанных байт записывается в *size.
В случае успеха возвращает 0 (в том числе и в случае конца файла).
В случае ошибки возвращает 1.
Может устанавливать в errno значение EBADF, а также значения, устанавливаемые функцией fread().
При этом, если fext != NULL, такое же значение установится для внутреннего кода ошибки.*/
int fext_read(struct fext *fext, void *buf, size_t *size);

/*Устанавливает режим буферизации для файла fext. Аргументы эквивалентны функции setvbuf() из stdio.
В случае успеха возвращает 0.
В случае ошибки возвращает 1.
Может устанавливать в errno значение EBADF, а также значения, устанавливаемые функцией setvbuf().
При этом, если fext != NULL, такое же значение установится для внутреннего кода ошибки.*/
int fext_setvbuf(struct fext *fext, void *buf, int mode, size_t size);

/*Изменяет позицию ввода/вывода в файле fext. Аргументы эквивалентны функции fseek() из stdio.
В случае успеха возвращает 0.
В случае ошибки возвращает 1.
Может устанавливать в errno значение EBADF, а также значения, устанавливаемые функцией fseek().
При этом, если fext != NULL, такое же значение установится для внутреннего кода ошибки.*/
int fext_seek(struct fext *fext, long offset, int whence);

/*Узнать позицию ввода/вывода в файле.
Смещение позиции ввода/вывода относительно начала файла записывается в *offset.
Важно, что значение может быть получено даже если файл не разрешает произвольный доступ.
В таком случае, полученное значение не применимо для позиционирования (fext_seek() не сработает на таком файле в любом случае),
зато по нему можно отслеживать перемещение позиции ввода вывода по файлу.
В случае успеха возвращает 0.
В случае ошибки возвращает 1.
Может устанавливать в errno значение EBADF, а также значения, устанавливаемые функцией ftell(), кроме ESPIPE.
При этом, если fext != NULL, такое же значение установится для внутреннего кода ошибки.*/
int fext_tell(struct fext *fext, long *offset);

/*Получить внутренний код ошибки файла fext. Код записывается в *err.
В случае успеха возвращает 0.
Если fext == NULL, возвращает 1 и устанавливает в errno значение EBADF. *err при этом не изменяется.*/
int fext_geterr(struct fext *fext, int *err);

/*Генерирует строку-сообщение, соответствующее внутреннему коду ошибки файла fext.
Указатель на строку записывается в *s.
В случае успеха возвращает 0.
Если fext == NULL, возвращает 1 и устанавливает в errno значение EBADF. *s при этом не изменяется.*/
int fext_strerror(struct fext *fext, char **s); 

/*Печатает сообщение, соответствующее внутреннему коду ошибки файла fext, на стандартный вывод ошибок. Аргумент s эквивалентен функции perror().
В случае успеха возвращает 0.
Если fext == NULL, возвращает 1 и устанавливает в errno значение EBADF. Сообщение при этом не печатается.*/
int fext_perror(struct fext *fext, const char *s);

#endif
